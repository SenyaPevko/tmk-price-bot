import os

from currency_rater import CurrencyRater
from logger import Logger
from parser import Parser
import telebot
from telebot import types
from dotenv import load_dotenv


class Bot:
    def __init__(self):
        self.parser = Parser()
        self.logger = Logger("bot logger")
        self.currency_rater = CurrencyRater()
        load_dotenv()
        self.token = os.getenv("token")
        self.bot = telebot.TeleBot(self.token)
        self.initialize_bot()

    def start(self):
        self.logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self.bot.polling(none_stop=True)

    def get_default_buttons(self):
        markup = types.ReplyKeyboardMarkup(row_width=2)
        usd_button = types.KeyboardButton('–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞üá∫üá∏')
        cny_button = types.KeyboardButton('–ö—É—Ä—Å —é–∞–Ω—èüá®üá≥')
        iron_button = types.KeyboardButton('–ö—É—Ä—Å —á—É–≥—É–Ω–∞‚õèÔ∏è')
        steel_button = types.KeyboardButton('–ö—É—Ä—Å —Å—Ç–∞–ª–∏üë∑')
        home_button = types.KeyboardButton('–í –Ω–∞—á–∞–ª–æüè†')
        about_button = types.KeyboardButton('–û –±–æ—Ç–µü§ñ')
        markup.add(about_button, home_button, usd_button, cny_button, iron_button, steel_button)

        return markup

    def get_currency_buttons(self):
        markup = types.ReplyKeyboardMarkup(row_width=2)
        usd_button = types.KeyboardButton('USD')
        cny_button = types.KeyboardButton('CNY')
        rub_button = types.KeyboardButton('–†–£–ë')
        markup.add(usd_button, cny_button, rub_button)

        return markup

    def show_default_buttons(self, message):
        markup = self.get_default_buttons()
        self.bot.reply_to(message, "–û—Ç–ª–∏—á–Ω–æ", reply_markup=markup)

    def initialize_bot(self):
        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message):
            # Adding default bot commands
            markup = self.get_default_buttons()
            self.bot.reply_to(message,
                         "–ü—Ä–∏–≤–µ—Ç! –Ø –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∞–ª—é—Ç—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –∫–µ–π—Å–∞ –æ—Ç –¢–ú–ö. –ê –ø–æ–∫–∞ —è —Å—á–∏—Ç–∞—é, –º–æ–∂–µ—à—å –≤—ã–ø–∏—Ç—å –≤–µ—á–µ—Ä–Ω–∏–π –∫–æ—Ñ–∏–π. üòâ",
                         reply_markup=markup)
            self.logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.chat.first_name}")

        @self.bot.message_handler(func=lambda message: True)
        def handle_all_messages(message):
            match message.text:
                case '–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞üá∫üá∏':
                    usd_rate = self.currency_rater.get_currency_rate('USD')
                    if usd_rate is not None:
                        self.bot.reply_to(message, f"–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ (USD): {usd_rate}")
                    else:
                        self.bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞.")

                case '–ö—É—Ä—Å —é–∞–Ω—èüá®üá≥':
                    cny_rate = self.currency_rater.get_currency_rate('CNY')
                    if cny_rate is not None:
                        self.bot.reply_to(message, f"–ö—É—Ä—Å —é–∞–Ω—è (CNY): {cny_rate}")
                    else:
                        self.bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —é–∞–Ω—è.")

                case '–ö—É—Ä—Å —á—É–≥—É–Ω–∞‚õèÔ∏è':
                    start_iron_calculator(message)

                case '–ö—É—Ä—Å —Å—Ç–∞–ª–∏üë∑':
                    start_steel_calculator(message)

                case '–í –Ω–∞—á–∞–ª–æüè†':
                    send_welcome(message)
                case '–û –±–æ—Ç–µü§ñ':
                    self.about(message)
                case _:
                    self.logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ |{message.text}| –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, —Ç.–∫. –Ω–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã.")
                    self.bot.reply_to(message,
                                 f'{message.chat.first_name}, —è –±—ã —Ö–æ—Ç–µ–ª —Å –≤–∞–º–∏ –ø–æ–±–æ–ª—Ç–∞—Ç—å, –Ω–æ –≤—Å–µ, —á—Ç–æ —è —É–º–µ—é - —Å—á–∏—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏. \n\n–ë–∏–ø-–±–∏–ø –±—É–ø-–±—É–ø...')

        @self.bot.message_handler(commands=['about'])
        def about_command(message):
            about_text = "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–∏—Ä–æ–≤–∫–∞—Ö —á–µ—Ä–º–µ—Ç–∞. "
            about_text += "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏."
            self.bot.reply_to(message, about_text)

        @self.bot.message_handler(func=lambda message: message.text == '–ö—É—Ä—Å —á—É–≥—É–Ω–∞‚õèÔ∏è')
        def start_iron_calculator(message):
            self.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á—É–≥—É–Ω–∞ (–≤ –º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ç–æ–Ω–Ω–∞—Ö):")
            self.bot.register_next_step_handler(message, self.process_iron_currency)

        @self.bot.message_handler(func=lambda message: message.text == '–ö—É—Ä—Å —á—É–≥—É–Ω–∞‚õèÔ∏è')
        def start_steel_calculator(message):
            self.bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å —Å—Ç–∞–ª–∏ (–≤ –º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ç–æ–Ω–Ω–∞—Ö):")
            self.bot.register_next_step_handler(message, self.process_steel_currency)

    def about(self, message):
        self.bot.reply_to(message,
                          "–ù–µ–º–Ω–æ–≥–æ –æ–±–æ –º–Ω–µ: \n- –Ø –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∞–ª—é—Ç—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –¢–ú–ö. \n- –Ø –æ—á–µ–Ω—å –ª—é–±–ª—é —Å–≤–æ—é —Ä–∞–±–æ—Ç—É \n- –ö—É—Ä—Å –Æ–∞–Ω—è –∏ –î–æ–ª–ª–∞—Ä–∞ –°–®–ê –≤—ã–¥–∞–µ—Ç—Å—è –ø–æ –æ—Ç–Ω–æ—à–µ–∏—é –∫ –†—É–±–ª—é\n- –ï–¥–∏–Ω–∏—Ü—ã –∫–æ—Ç–∏—Ä–æ–≤–æ–∫ —Å—Ç–∞–ª–∏ –∏ —á—É–≥—É–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤—ã–¥–∞–≤–∞–µ–º—ã–º –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.")

        self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")

    def process_metal_weight(self, message, metal_search_name, metal_show_name):
        try:
            weight = float(message.text)
            markup = self.get_currency_buttons()
            self.bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=markup)
            self.bot.register_next_step_handler(message, self.process_metal_currency,
                                                metal_search_name, metal_show_name, weight)
        except ValueError:
            self.bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–µ—Å–∞.")

    def process_metal_currency(self, message, metal_search_name, metal_show_name, weight):
        if message.text in ['USD', 'CNY', '–†–£–ë']:
            currency = message.text
            metal_rate = self.parser.get_commodity_prices(metal_search_name)
            if metal_rate is not None:
                price = float(metal_rate.replace(',', '')) * weight
                price = self.convert_num_from_usd(currency, price)
                self.bot.reply_to(message, f"–¶–µ–Ω–∞ {metal_show_name} ({weight} –º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ç–æ–Ω–Ω): {price:.2f} {currency}")
                self.show_default_buttons(message)
            else:
                self.bot.reply_to(message, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å {metal_show_name}.")
                self.show_default_buttons(message)
        else:
            self.bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")

    def process_iron_currency(self, message):
        metal_search_name = "Iron Ore"
        metal_show_name = "—á—É–≥—É–Ω–∞"
        self.process_metal_weight(message, metal_search_name, metal_show_name)

    def process_steel_currency(self, message):
        metal_search_name = "Steel"
        metal_show_name = "—Å—Ç–∞–ª–∏"
        self.process_metal_weight(message, metal_search_name, metal_show_name)

    def convert_num_from_usd(self, currency, price):
        match currency:
            case "–†–£–ë":
                price *= float(self.currency_rater.get_currency_rate('USD'))
            case "CNY":
                price *= float(self.currency_rater.get_currency_rate('USD'))
                price /= float(self.currency_rater.get_currency_rate('CNY'))

        return price
